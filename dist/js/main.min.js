/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_choisePerson_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/choisePerson.js */ \"./src/js/modules/choisePerson.js\");\n/* harmony import */ var _modules_mainBlock_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/mainBlock.js */ \"./src/js/modules/mainBlock.js\");\n\r\n\r\n\r\n\r\n\r\n(0,_modules_choisePerson_js__WEBPACK_IMPORTED_MODULE_0__.choise)()\r\n;(0,_modules_mainBlock_js__WEBPACK_IMPORTED_MODULE_1__.drawCanvas)()\n\n//# sourceURL=webpack://gulpwebpack/./src/js/main.js?");

/***/ }),

/***/ "./src/js/modules/choisePerson.js":
/*!****************************************!*\
  !*** ./src/js/modules/choisePerson.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"choise\": () => (/* binding */ choise)\n/* harmony export */ });\nconst choise = () => {\r\n    const personBlock = document.querySelectorAll('.person__characther')\r\n    const nextButton = document.querySelector('.btn__next')\r\n\r\n    let choiseHero = false\r\n    let choiseMonster = false\r\n\r\n\r\n    function activeChoise(item,activeClass){\r\n        let itemBlcok = item.closest('.person__characther').querySelectorAll('.person__item')\r\n        itemBlcok.forEach(item => {\r\n            item.classList.remove(activeClass)\r\n        })\r\n    }\r\n\r\n    personBlock.forEach(item => {\r\n        item.addEventListener('click', (e) => {\r\n            let target = e.target\r\n            if(target.classList.contains('knights')){\r\n                activeChoise(target,'active__knights')\r\n                target.closest('.person__item').classList.add('active__knights')\r\n                choiseHero = true\r\n                console.log(target)\r\n            }\r\n            if(target.classList.contains('monster')){\r\n                console.log(target)\r\n                activeChoise(target,'active__monster')\r\n                target.closest('.person__item').classList.add('active__monster')\r\n                choiseMonster = true\r\n                console.log(target)\r\n            }\r\n            Next()\r\n        })\r\n    })\r\n    function Next(){\r\n        console.log(choiseHero,choiseMonster)\r\n        if(choiseHero && choiseMonster){\r\n            nextButton.style.display = 'block'\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://gulpwebpack/./src/js/modules/choisePerson.js?");

/***/ }),

/***/ "./src/js/modules/mainBlock.js":
/*!*************************************!*\
  !*** ./src/js/modules/mainBlock.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"drawCanvas\": () => (/* binding */ drawCanvas)\n/* harmony export */ });\n/* harmony import */ var _sprite_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sprite.js */ \"./src/js/modules/sprite.js\");\n/* harmony import */ var _win_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./win.js */ \"./src/js/modules/win.js\");\n\r\n\r\n\r\nconst drawCanvas = () => {\r\n    const nextBtn = document.querySelector('.btn__next')\r\n    const gameBlock = document.querySelector('.game__content')\r\n\r\n    nextBtn.addEventListener('click', () => {\r\n        gameBlock.style.display = 'inline-block'\r\n        const canvasBlock = document.querySelector('canvas')\r\n        const canvasView = canvasBlock.getContext('2d')\r\n\r\n\r\n        canvasBlock.width = 1024\r\n        canvasBlock.height = 576\r\n\r\n        canvasView.fillRect(0, 0, canvasBlock.width, canvasBlock.height)\r\n\r\n\r\n        const background = new _sprite_js__WEBPACK_IMPORTED_MODULE_0__.Sprite({\r\n            position: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            imageSrc: '.././img/map/background.png',\r\n            canvasBlock: canvasBlock,\r\n            canvasView: canvasView\r\n        })\r\n\r\n        const shop = new _sprite_js__WEBPACK_IMPORTED_MODULE_0__.Sprite({\r\n            position: {\r\n                x: 600,\r\n                y: 135\r\n            },\r\n            imageSrc: '.././img/map/shop_anim.png',\r\n            scale: 2.7,\r\n            framesMax: 6,\r\n            canvasBlock: canvasBlock,\r\n            canvasView: canvasView\r\n        })\r\n\r\n        const player = new _sprite_js__WEBPACK_IMPORTED_MODULE_0__.Fighter({\r\n            position:{\r\n                x: 0,\r\n                y: 100\r\n            },\r\n            velocity:{\r\n                x: 5,\r\n                y: 1\r\n            },\r\n            offset: {\r\n                x: 100,\r\n                y: 215\r\n            },\r\n            color: 'blue',\r\n            imageSrc: '.././img/person/Hero1/Idle.png',\r\n            framesMax: 10,\r\n            scale: 2.65,\r\n            offset: {\r\n                x: 100,\r\n                y: 120\r\n            },\r\n            sprites: {\r\n                idle: {\r\n                    imageSrc : '.././img/person/Hero1//Idle.png',\r\n                    framesMax: 10,\r\n                },\r\n                run: {\r\n                    imageSrc: '.././img/person/Hero1//Run.png',\r\n                    framesMax: 8,\r\n                },\r\n                jump: {\r\n                    imageSrc: '.././img/person/Hero1/Jump.png',\r\n                    framesMax: 3,\r\n                },\r\n                fall: {\r\n                    imageSrc: '.././img/person/Hero1/Fall.png',\r\n                    framesMax: 3,\r\n                },\r\n                attack:{\r\n                    imageSrc: '.././img/person/Hero1/Attack1.png',\r\n                    framesMax: 7,\r\n                },\r\n                takeHit:{\r\n                    imageSrc: '.././img/person/Hero1/Take Hit.png',\r\n                    framesMax: 3,\r\n                },\r\n                death:{\r\n                    imageSrc: '.././img/person/Hero1/Death.png',\r\n                    framesMax: 7,\r\n                }\r\n            },\r\n            attackBox: {\r\n                offset: {\r\n                    x: 120,\r\n                    y: 50\r\n                },\r\n                width: 100,\r\n                height: 50\r\n            },\r\n            canvasView: canvasView,\r\n            canvasBlock: canvasBlock\r\n        })\r\n        const enemy = new _sprite_js__WEBPACK_IMPORTED_MODULE_0__.Fighter({\r\n            position:{\r\n                x: 400,\r\n                y: 100\r\n            },\r\n            velocity:{\r\n                x: 5,\r\n                y: 1\r\n            },\r\n            offset: {\r\n                x: 20,\r\n                y: 100\r\n            },\r\n            color: 'blue',\r\n            imageSrc: '.././img/person/Hero2/idle.png',\r\n            framesMax: 6,\r\n            scale: 1.6,\r\n            offset: {\r\n                x: 100,\r\n                y: 35\r\n            },\r\n            sprites: {\r\n                idle: {\r\n                    imageSrc : '.././img/person/Hero2/idle.png',\r\n                    framesMax: 6,\r\n                },\r\n                run: {\r\n                    imageSrc: '.././img/person/Hero2/Run.png',\r\n                    framesMax: 8,\r\n                },\r\n                jump: {\r\n                    imageSrc: '.././img/person/Hero2/Jump.png',\r\n                    framesMax: 2,\r\n                },\r\n                fall: {\r\n                    imageSrc: '.././img/person/Hero2/Fall.png',\r\n                    framesMax: 2,\r\n                },\r\n                attack:{\r\n                    imageSrc: '.././img/person/Hero2/Attack1.png',\r\n                    framesMax: 6,\r\n                },\r\n                takeHit:{\r\n                    imageSrc: '.././img/person/Hero2/Hit.png',\r\n                    framesMax: 4,\r\n                },\r\n                death:{\r\n                    imageSrc: '.././img/person/Hero2/Death.png',\r\n                    framesMax: 11,\r\n                },\r\n            },\r\n            attackBox: {\r\n                offset: {\r\n                    x: -150,\r\n                    y: 50\r\n                },\r\n                width: 130,\r\n                height: 50\r\n            },\r\n            canvasView: canvasView,\r\n            canvasBlock: canvasBlock\r\n        })\r\n        \r\n\r\n        const keys = {\r\n            d:{\r\n                pressed: false\r\n            },\r\n            a:{\r\n                pressed: false\r\n            },\r\n            w:{\r\n                pressed: false\r\n            },\r\n            'ArrowRight':{\r\n                pressed: false\r\n            },\r\n            'ArrowLeft':{\r\n                pressed: false\r\n            },\r\n            'Enter':{\r\n                pressed: false\r\n            }\r\n        }\r\n\r\n        function collisonAttack({rectangle1,rectangle2}){\r\n            return(\r\n                rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x && rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width && rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y && rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height && rectangle1.isAttack \r\n            )\r\n        }\r\n\r\n        \r\n        let timer = 10\r\n        let timerID\r\n\r\n\r\n        function timeGame(){\r\n            const timeBlock = document.querySelector('.game__timer')\r\n            if (timer > 0){\r\n                timer--\r\n                timerID = setTimeout(timeGame,1000)\r\n                timeBlock.innerHTML = timer\r\n                console.log(timer)\r\n            }\r\n            if(timer == 0){\r\n                (0,_win_js__WEBPACK_IMPORTED_MODULE_1__.winner)(player,enemy,timerID)\r\n            }\r\n        }\r\n\r\n        timeGame()\r\n    \r\n\r\n\r\n        function animate(){\r\n            window.requestAnimationFrame(animate)\r\n            canvasView.fillStyle = 'black'\r\n            canvasView.fillRect(0, 0, canvasBlock.width, canvasBlock.height)\r\n\r\n            background.update()\r\n            shop.update()\r\n            player.update()\r\n            enemy.update()\r\n\r\n            player.velocity.x = 0\r\n            enemy.velocity.x = 0\r\n            // player\r\n            player.swicthSprite('idle')\r\n            if(keys.d.pressed && player.lastKey === 'd'){\r\n                player.velocity.x = 5\r\n                player.swicthSprite('run')\r\n            }\r\n            if(keys.a.pressed && player.lastKey === 'a'){\r\n                player.velocity.x = -5\r\n                player.swicthSprite('run')\r\n            }\r\n            if(collisonAttack({rectangle1: player, rectangle2: enemy}) && player.isAttack && player.framesCurrent === 4){\r\n                player.isAttack = false\r\n                enemy.takeHit()\r\n                document.querySelector('#player2').style.width = enemy.health + '%'\r\n            }\r\n\r\n            if(player.velocity.y < 0){\r\n                player.swicthSprite('jump')\r\n            }\r\n            if(player.velocity.y > 0){\r\n                player.swicthSprite('fall')\r\n            }\r\n\r\n            // enemy\r\n            enemy.swicthSprite('idle')\r\n            if(keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft'){\r\n                enemy.velocity.x = -5\r\n                enemy.swicthSprite('run')\r\n            }\r\n            \r\n            if(keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight'){\r\n                enemy.velocity.x = 5\r\n                enemy.swicthSprite('run')\r\n            }\r\n\r\n            \r\n            if(collisonAttack({rectangle1: enemy, rectangle2: player}) && enemy.isAttack && enemy.framesCurrent === 4){\r\n                enemy.isAttack = false\r\n                player.takeHit()\r\n                console.log('Attack 2')\r\n                document.querySelector('#player1').style.width = player.health + '%'\r\n            }\r\n\r\n\r\n            if(player.health == 0 || enemy.health == 0){\r\n                (0,_win_js__WEBPACK_IMPORTED_MODULE_1__.winner)(player,enemy,timerID)\r\n                \r\n            }\r\n\r\n            if(player.isAttack && player.framesCurrent === 4){\r\n                player.isAttack = false\r\n            }\r\n    \r\n            if(enemy.isAttack && enemy.framesCurrent === 4){\r\n                enemy.isAttack = false\r\n            }\r\n\r\n            if(enemy.velocity.y < 0){\r\n                enemy.swicthSprite('jump')\r\n            }\r\n            if(enemy.velocity.y > 0){\r\n                enemy.swicthSprite('fall')\r\n            }\r\n\r\n        }\r\n        animate()\r\n\r\n        window.addEventListener('keydown', (e) => {\r\n            console.log(e.key)\r\n            switch(e.key){\r\n                // player\r\n                case 'd':\r\n                    keys.d.pressed = true\r\n                    player.lastKey = 'd'\r\n                    break\r\n                case 'a':\r\n                    keys.a.pressed = true\r\n                    player.lastKey = 'a'\r\n                    break\r\n                case 'w':\r\n                    player.velocity.y = -8\r\n                    break\r\n                case ' ':\r\n                    player.attack()\r\n                    break\r\n                // enemy\r\n                case 'ArrowLeft':\r\n                    enemy.lastKey = 'ArrowLeft'\r\n                    keys.ArrowLeft.pressed = true\r\n                    break\r\n                case 'ArrowRight':\r\n                    enemy.lastKey = 'ArrowRight'\r\n                    keys.ArrowRight.pressed = true\r\n                    break\r\n                case 'Enter':\r\n                    enemy.velocity.y = -8\r\n                    break\r\n                case '/':\r\n                    enemy.attack()\r\n                    break\r\n            }\r\n        })\r\n\r\n        window.addEventListener('keyup', (e) => {\r\n            switch(e.key){\r\n                // player\r\n                case 'd':\r\n                    keys.d.pressed = false\r\n                    break\r\n                case 'a':\r\n                    keys.a.pressed = false\r\n                    break\r\n                // enemy\r\n                case 'ArrowLeft':\r\n                    keys.ArrowLeft.pressed = false\r\n                    break\r\n                case 'ArrowRight':\r\n                    keys.ArrowRight.pressed = false\r\n                    break\r\n            }\r\n        })\r\n    })\r\n}\r\n\n\n//# sourceURL=webpack://gulpwebpack/./src/js/modules/mainBlock.js?");

/***/ }),

/***/ "./src/js/modules/sprite.js":
/*!**********************************!*\
  !*** ./src/js/modules/sprite.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Fighter\": () => (/* binding */ Fighter),\n/* harmony export */   \"Sprite\": () => (/* binding */ Sprite)\n/* harmony export */ });\nclass Sprite{\r\n    constructor({position, imageSrc, scale = 1, framesMax = 1, offset = {x:0, y:0},canvasBlock,canvasView}){\r\n        this.position = position\r\n        this.height = 150\r\n        this.width = 50\r\n        this.image = new Image()\r\n        this.image.src = imageSrc\r\n        this.scale = scale\r\n        this.framesMax = framesMax\r\n        this.framesCurrent = 0\r\n        this.framesElapsed = 0\r\n        this.framesHold = 5\r\n        this.offset = offset\r\n        this.canvasBlock = canvasBlock\r\n        this.canvasView = canvasView\r\n    }\r\n\r\n    draw(){\r\n        this.canvasView.drawImage(this.image,this.framesCurrent * (this.image.width / this.framesMax), 0,this.image.width / this.framesMax,this.image.height,this.position.x-this.offset.x, this.position.y-this.offset.y, (this.image.width / this.framesMax) * this.scale, this.image.height * this.scale)\r\n    }\r\n\r\n    animateFrame(){\r\n        this.framesElapsed++\r\n\r\n        if(this.framesElapsed % this.framesHold === 0){\r\n            if(this.framesCurrent < this.framesMax - 1){\r\n                this.framesCurrent++\r\n            }\r\n            else{\r\n                this.framesCurrent = 0\r\n            }\r\n        }\r\n    }\r\n\r\n    update(){\r\n        this.draw()\r\n        this.animateFrame()\r\n    }\r\n}\r\n\r\nclass Fighter extends Sprite{\r\n    constructor({position,velocity,color='green',imageSrc, scale = 1, framesMax = 1, offset = {x: 0,y: 0}, sprites, attackBox = {offset: {},width: undefined,height: undefined},canvasBlock,canvasView}){\r\n        super({\r\n            position,\r\n            imageSrc,\r\n            scale,\r\n            framesMax,\r\n            offset,\r\n        })\r\n        this.velocity = velocity\r\n        this.height = 150\r\n        this.width = 50\r\n        this.lastKeys\r\n        this.attackBox = {\r\n            position: {\r\n                x: this.position.x,\r\n                y: this.position.y\r\n            },\r\n            offset: attackBox.offset,\r\n            width: attackBox.width,\r\n            height: attackBox.height, \r\n        },\r\n        this.color = color,\r\n        this.isAttack\r\n        this.health = 100\r\n        this.framesCurrent = 0\r\n        this.framesElapsed = 0\r\n        this.framesHold = 5\r\n        this.sprites = sprites\r\n        this.dead = false\r\n        this.canvasBlock = canvasBlock\r\n        this.canvasView = canvasView\r\n        this.gravity = 0.2\r\n\r\n        for(const sprite in this.sprites){\r\n            sprites[sprite].image = new Image()\r\n            sprites[sprite].image.src = sprites[sprite].imageSrc\r\n        }\r\n\r\n        console.log(this.sprites)\r\n    }\r\n\r\n    update(){\r\n        this.draw()\r\n        if(!this.dead){\r\n            this.animateFrame()\r\n        }\r\n\r\n        this.attackBox.position.x = this.position.x + this.attackBox.offset.x\r\n        this.attackBox.position.y = this.position.y + this.attackBox.offset.y\r\n        \r\n        \r\n        this.position.y += this.velocity.y\r\n        this.position.x += this.velocity.x\r\n\r\n\r\n        if(this.position.y < 0){\r\n            this.velocity.y  = +1\r\n        }\r\n\r\n        if (this.position.y + this.velocity.y + this.height >= this.canvasBlock.height - 95){\r\n            this.velocity.y  = 0\r\n        }\r\n        else{\r\n            this.velocity.y += this.gravity\r\n        }\r\n\r\n        if(this.position.x < 0){\r\n            this.position.x -= this.velocity.x\r\n        }\r\n        if (this.position.x >= 1024-this.width){\r\n            this.position.x -= this.velocity.x\r\n        }\r\n    }\r\n\r\n    attack(){\r\n        this.isAttack = true\r\n        this.swicthSprite('attack')\r\n\r\n    }\r\n\r\n    takeHit(){\r\n        this.health -= 20\r\n\r\n        if(this.health <= 0){\r\n            this.swicthSprite('death')\r\n        }\r\n        else{\r\n            this.swicthSprite('takeHit')\r\n        }\r\n    }\r\n\r\n    swicthSprite(sprite){\r\n        if(this.image === this.sprites.attack.image && this.framesCurrent < this.sprites.attack.framesMax - 1) return\r\n\r\n        if(this.image === this.sprites.takeHit.image && this.framesCurrent < this.sprites.takeHit.framesMax - 1) return\r\n\r\n        if(this.image === this.sprites.death.image){\r\n            if(this.framesCurrent === this.sprites.death.framesMax -1){\r\n                this.dead = true\r\n            }\r\n            return\r\n        }\r\n\r\n\r\n        switch(sprite){\r\n            case 'idle':\r\n                if (this.image !== this.sprites.idle.image){\r\n                    this.image = this.sprites.idle.image\r\n                    this.framesMax = this.sprites.idle.framesMax\r\n                }\r\n                break\r\n            case 'run':\r\n                if (this.image !== this.sprites.run.image){\r\n                    this.image = this.sprites.run.image\r\n                    this.framesMax = this.sprites.run.framesMax\r\n                }\r\n                break\r\n            case 'jump':\r\n                if (this.image !== this.sprites.run.image){\r\n                    this.image = this.sprites.jump.image\r\n                    this.framesMax = this.sprites.jump.framesMax\r\n                }\r\n                break\r\n            case 'fall':\r\n                if (this.image !== this.sprites.jump.image){\r\n                    this.image = this.sprites.fall.image\r\n                    this.framesMax = this.sprites.fall.framesMax\r\n                }\r\n                break\r\n            case 'attack':\r\n                if (this.image !== this.sprites.attack.image){\r\n                    this.image = this.sprites.attack.image\r\n                    this.framesMax = this.sprites.attack.framesMax\r\n                    this.framesCurrent = 0\r\n                }\r\n                break\r\n            case 'takeHit':\r\n                if (this.image !== this.sprites.takeHit.image){\r\n                    this.image = this.sprites.takeHit.image\r\n                    this.framesMax = this.sprites.takeHit.framesMax\r\n                    this.framesCurrent = 0\r\n                }\r\n                break\r\n            case 'death':\r\n                if (this.image !== this.sprites.death.image){\r\n                    this.image = this.sprites.death.image\r\n                    this.framesMax = this.sprites.death.framesMax\r\n                    this.framesCurrent = 0\r\n                }\r\n                break\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://gulpwebpack/./src/js/modules/sprite.js?");

/***/ }),

/***/ "./src/js/modules/win.js":
/*!*******************************!*\
  !*** ./src/js/modules/win.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"winner\": () => (/* binding */ winner)\n/* harmony export */ });\nconst  winner = (player,enemy,timeClear) => {\r\n    clearTimeout(timeClear)\r\n    const endGame = document.querySelector('.game__end')\r\n    if(player.health > enemy.health){\r\n        endGame.style.display = 'block'\r\n        endGame.innerHTML = 'Player 1 Win'\r\n    }\r\n    if(player.health < enemy.health){\r\n        endGame.style.display = 'block'\r\n        endGame.innerHTML = 'Player 2 Win'\r\n    }\r\n    if(player.health == enemy.health){\r\n        endGame.style.display = 'block'\r\n        endGame.innerHTML = 'Tie'\r\n    }\r\n}     \n\n//# sourceURL=webpack://gulpwebpack/./src/js/modules/win.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/main.js");
/******/ 	
/******/ })()
;